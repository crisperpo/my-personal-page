name: Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: write
  issues: write

jobs:
  avoid-redundant-deploy:
    name: Avoid redundancy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [client, server]
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  build:
    name: Build and setup environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [client]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --strict-peer-dependencies]
            - args: [--global, gulp, prettier, typescript]
      - name: Read node version
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT
        id: nvmrc
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NVMRC}}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Set up env variables
        run: |
          echo "CONTENTFUL_SPACE_ID=${{ secrets.CONTENTFUL_SPACE_ID}}" >> $GITHUB_ENV
          echo "CONTENTFUL_ACCESS_TOKEN=${{ secrets.CONTENTFUL_ACCESS_TOKEN}}" >> $GITHUB_ENV
      - name: Build project
        working-directory: ${{ matrix.app }}
        run: pnpm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ${{ matrix.app }}/dist

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [client, server]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --strict-peer-dependencies]
            - args: [--global, gulp, prettier, typescript]
      - name: Read node version
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT
        id: nvmrc
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NVMRC}}
          cache: 'pnpm'
      - name: Install dependencies
        working-directory: ${{ matrix.app }}
        run: pnpm install --frozen-lockfile
      - name: Lint code
        working-directory: ${{ matrix.app }}
        run: pnpm run lint

  test:
    name: Run unit tests
    needs: [lint, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [client, server]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --strict-peer-dependencies]
            - args: [--global, gulp, prettier, typescript]
      - name: Read node version
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT
        id: nvmrc
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.NVMRC}}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ${{ matrix.app }}/dist
      - name: Run tests
        working-directory: ${{ matrix.app }}
        run: pnpm run test

#   deploy:
#     name: Deploy to Vercel
#     needs: [test]
#     runs-on: ubuntu-latest
#     steps:
#         - name: Checkout repository
#           uses: actions/checkout@v4
#         - name: Trigger backend deploy
#           run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}
#         - name: Trigger frontend deploy
#           run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND }}
